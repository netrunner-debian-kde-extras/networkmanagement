#!/usr/bin/perl -w

=head1 NAME

dh - debhelper command sequencer

=cut

use strict;
use Debian::Debhelper::Dh_Lib;

=head1 SYNOPSIS

B<dh> sequence [B<--until> I<cmd>] [B<--before> I<cmd>] [B<--after> I<cmd>] [B<--remaining>] [B<--with> I<addon>] [S<I<debhelper options>>]

=head1 DESCRIPTION

dh runs a sequence of debhelper commands. The supported sequences
correspond to the targets of a debian/rules file: "build", "clean",
"install", "binary-arch", "binary-indep", and "binary".

Commands in the binary-indep sequence are passed the "-i" option to ensure
they only work on binary independent packages, and commands in the
binary-arch sequences are passed the "-a" option to ensure they only work
on architecture dependent packages.

Each debhelper command will record when it's successfully run in
debian/package.debhelper.log. (Which dh_clean deletes.) So dh can tell
which commands have already been run, for which packages, and skip running
those commands again.

Each time dh is run, it examines the log, and finds the last logged command
that is in the specified sequence. It then continues with the next command
in the sequence. The B<--until>, B<--before>, B<--after>, and B<--remaining>
options can override this behavior.

=head1 OPTIONS

=over 4

=item B<--until> I<cmd>

Run commands in the sequence until and including I<cmd>, then stop.

=item B<--before> I<cmd>

Run commands in the sequence before I<cmd>, then stop.

=item B<--after> I<cmd>

Run commands in the sequence that come after I<cmd>.

=item B<--remaining>

Run all commands in the sequence that have yet to be run.

=item B<--with> I<addon>

Add the debhelper commands specified by the given addon to appropriate places
in the sequence of commands that is run. This option can be repeated more
than once, and is used when there is a third-party package that provides
debhelper commands. See "SEQUENCE ADDONS" below for documentation about what
such packages should do to be supported by --with.

=back

All other options passed to dh are passed on to each command it runs. This
can be used to set an option like "-v" or "-X" or "-N", as well as for more
specialised options.

=head1 COMMAND SPECIFICATION

I<cmd> can be a full name of a debhelper command, or a substring. It'll first
search for a command in the sequence exactly matching the name, to avoid any
ambiguity. If there are multiple substring matches, the last one in the
sequence will be used.

=head1 SEQUENCE ADDONS

When B<--with> I<addon> is used, dh loads the perl module
Debian::Debhelper::Sequence::I<addon>. Two functions are provided to let
the module add its commands to sequences:

=over 4

=item Debian::Debhelper::Dh_Lib::insert_before(existing_command, new_command)

Insert I<new_command> in sequences before I<existing_command>.

=item Debian::Debhelper::Dh_Lib::insert_after(existing_command, new_command)

Insert I<new_command> in sequences after I<existing_command>.

=item Debian::Debhelper::Dh_Lib::remove_command(existing_command)

Remove I<existing_command> from the list of commands to run.

=back

=cut

sub command_pos {
	my $command=shift;
	my @sequence=@_;

	foreach my $i (0..$#sequence) {
		if ($command eq $sequence[$i]) {
			return $i;
		}
	}

	my @matches;
	foreach my $i (0..$#sequence) {
		if ($sequence[$i] =~ /\Q$command\E/) {
			push @matches, $i;
		}
	}
	if (! @matches) {
		error "command specification \"$command\" does not match any command in the sequence"
	}
	else {
		return pop @matches;
	}
}

=head1 EXAMPLES

To see what commands are included in a sequence, without actually doing
anything:

	dh binary-arch --no-act

This is a very simple rules file, for packages where the default sequences of
commands work with no additional options.

	#!/usr/bin/make -f
	%:
		dh $@

This is a simple rules file that is a good starting place for customisation.
(It's also available in F</usr/share/doc/debhelper/examples/rules.simple>

	#!/usr/bin/make -f

	build: build-stamp
	build-stamp:
		dh build
		touch build-stamp

	clean:
		dh clean

	install: build install-stamp
	install-stamp:
		dh install
		touch install-stamp

	binary-arch: install
		dh binary-arch

	binary-indep: install
		dh binary-indep

	binary: binary-arch binary-indep

Often you'll want to pass an option to ./configure. This uses dh to run all
commands before L<dh_auto_configure(1)>, then runs that command by hand,
and then finished up by running the rest of the sequence. You could also
run ./configure by hand, instead of bothering with using dh_auto_configure.
And if necessary, you can add commands to run automake, etc here too.

	build: build-stamp
	build-stamp:
		dh build --before configure
		dh_auto_configure -- --kitchen-sink=yes
		dh build --after configure
		touch build-stamp

Here's how to skip two automated in a row (configure and build), and
instead run the commands by hand.

	build: build-stamp
	build-stamp:
		dh build --before configure
		./mondoconfig
		make universe-explode-in-delight
		dh build --after build
		touch build-stamp

Another common case is wanting to run some code manually after a particular
debhelper command is run.

	install: build install-stamp
	install-stamp:
		dh install --until dh_fixperms
		# dh_fixperms has run, now override it for one program
		chmod 4755 debian/foo/usr/bin/foo
		# and continue
		dh install --after dh_fixperms
		touch install-stamp

It's also fine to run debhelper commands early. Just make sure that at
least dh_prep is run from the sequence first, and be sure to use the
B<--remaining> option to ensure that commands that normally come before
those in the sequence are still run.

	install: build install-stamp
	install-stamp:
		dh install --until dh_prep
		dh_installdocs README TODO
		dh_installchangelogs Changes
		dh install --remaining
		touch install-stamp

        binary-arch: install
                dh_strip -X foo
                dh binary-arch --remaining

=cut

# Stash this away before init modifies it.
my @ARGV_orig=@ARGV;

init(options => {
	"until=s" => \$dh{UNTIL},
	"after=s" => \$dh{AFTER},
	"before=s" => \$dh{BEFORE},
	"remaining" => \$dh{REMAINING},
	"with=s" => sub {
		my ($option,$value)=@_;
		push @{$dh{WITH}},$value;
	},
});
inhibit_log();

# Definitions of sequences.
my %sequences;
$sequences{build} = [qw{
	dh_testdir
	dh_auto_configure
	dh_auto_build
	dh_auto_test
}],
$sequences{clean} = [qw{
	dh_testdir
	dh_auto_clean
	dh_clean
}];
$sequences{install} = [@{$sequences{build}}, qw{
	dh_testroot
	dh_prep
	dh_installdirs
	dh_auto_install

	dh_install
	dh_installdocs
	dh_installchangelogs
	dh_installexamples
	dh_installman

	dh_installcatalogs
	dh_installcron
	dh_installdebconf
	dh_installcatalogs
	dh_installemacsen
	dh_installifupdown
	dh_installinfo
	dh_installinit
	dh_installmenu
	dh_installmime
	dh_installmodules
	dh_installlogcheck
	dh_installlogrotate
	dh_installpam
	dh_installppp
	dh_installudev
	dh_installwm
	dh_installxfonts
	dh_bugfiles
	dh_lintian
	dh_desktop
	dh_gconf
	dh_icons
	dh_perl
	dh_scrollkeeper
	dh_usrlocal

	dh_link
	dh_compress
	dh_fixperms
}];
my @b=qw{
	dh_installdeb
	dh_gencontrol
	dh_md5sums
	dh_builddeb
};
$sequences{'binary-indep'} = [@{$sequences{install}}, @b];
$sequences{binary} = [@{$sequences{install}}, qw{
	dh_strip
	dh_makeshlibs
	dh_shlibdeps
}, @b];
$sequences{'binary-arch'} = [@{$sequences{binary}}];

# --with python-support is enabled by default, at least for now
unshift @{$dh{WITH}}, "python-support";

# sequence addon interface
sub _insert {
	my $offset=shift;
	my $existing=shift;
	my $new=shift;
	foreach my $sequence (keys %sequences) {
		my @list=@{$sequences{$sequence}};
		next unless grep $existing, @list;
		my @new;
		foreach my $command (@list) {
			if ($command eq $existing) {
				push @new, $new if $offset < 0;
				push @new, $command;
				push @new, $new if $offset > 0;
			}
			else {
				push @new, $command;
			}
		}
		$sequences{$sequence}=\@new;
	}
}
sub insert_before {
	_insert(-1, @_);
}
sub insert_after {
	_insert(1, @_);
}
sub remove_command {
	my $command=shift;
	foreach my $sequence (keys %sequences) {
		$sequences{$sequence}=[grep { $_ ne $command } @{$sequences{$sequence}}];
	}
	
}
foreach my $addon (@{$dh{WITH}}) {
	my $mod="Debian::Debhelper::Sequence::$addon";
	$mod=~s/-/_/g;
	eval "use $mod";
	if ($@) {
		error("--with $addon not supported or failed to load module $mod");
	}
}

# Get the sequence of commands to run.
if (! @ARGV) {
	error "specify a sequence to run";
}
my $sequence=shift;
if (! exists $sequences{$sequence}) {
	error "Unknown sequence $sequence (chose from: ".
		join(" ", sort keys %sequences).")";
}
my @sequence=@{$sequences{$sequence}};

# The list of all packages that can be acted on.
my @packages=@{$dh{DOPACKAGES}};

# Get the options to pass to commands in the sequence.
# Filter out options intended only for this program.
my @options;
if ($sequence eq 'binary-arch') {
	push @options, "-a";
	# as an optimisation, remove from the list any packages
	# that are not arch dependent
	my %arch_packages = map { $_ => 1 } getpackages("arch");
	@packages = grep { $arch_packages{$_} } @packages;
}
elsif ($sequence eq 'binary-indep') {
	push @options, "-i";
	# ditto optimisation for arch indep
	my %indep_packages = map { $_ => 1 } getpackages("indep");
	@packages = grep { $indep_packages{$_} } @packages;
}
while (@ARGV_orig) {
	my $opt=shift @ARGV_orig;
	next if $opt eq $sequence;
	if ($opt =~ /^--?(after|until|before|with)$/) {
		shift @ARGV_orig;
		next;
	}
	elsif ($opt =~ /^--?(no-act|remaining|(after|until|before|with)=)/) {
		next;
	}
	push @options, $opt;
}

# Figure out at what point in the sequence to start for each package.
my %logged;
my %startpoint;
foreach my $package (@packages) {
	my @log=loadlog($package);
	if ($dh{AFTER}) {
		# Run commands in the sequence that come after the
		# specified command.
		$startpoint{$package}=command_pos($dh{AFTER}, @sequence) + 1;
		# Write a dummy log entry indicating that the specified
		# command was, in fact, run. This handles the case where
		# no commands remain to run after it, communicating to
		# future dh instances that the specified command should not
		# be run again.
		writelog($package, $sequence[$startpoint{$package}-1]);
	}
	elsif ($dh{REMAINING}) {
		# Start at the beginning so all remaining commands will get
		# run.
		$startpoint{$package}=0;
	}
	else {
		# Find the last logged command that is in the sequence, and
		# continue with the next command after it. If no logged
		# command is in the sequence, we're starting at the beginning.. 			
		$startpoint{$package}=0;
COMMAND:	foreach my $command (reverse @log) {
			foreach my $i (0..$#sequence) {
				if ($command eq $sequence[$i]) {
					$startpoint{$package}=$i+1;
					last COMMAND;
				}
			}
		}
	}
}

# Figure out what point in the sequence to go to.
my $stoppoint=$#sequence;
if ($dh{UNTIL}) {
	$stoppoint=command_pos($dh{UNTIL}, @sequence);
}
elsif ($dh{BEFORE}) {
	$stoppoint=command_pos($dh{BEFORE}, @sequence) - 1;
}

# Now run the commands in the sequence.
foreach my $i (0..$stoppoint) {
	# Figure out which packages need to run this command.
	my @exclude;
	foreach my $package (@packages) {
		if ($startpoint{$package} > $i ||
		    $logged{$package}{$sequence[$i]}) {
			push @exclude, $package;
		}
	}
	
	if (@exclude eq @packages) {
		# Command already done for all packages.
		next;
	}
	elsif (! @exclude) {
		# Run command for all packages.
		run($sequence[$i], @options);
	}
	else {
		# Run command for only a subset of packages.
		run($sequence[$i], @options,
			map { "-N$_" } @exclude);
	}
}

sub run {
	my $command=shift;
	my @options=@_;
	
	# 3 space indent lines the command being run up under the 
	# sequence name after "dh ".
	print "   ";
	if (basename($command) =~ m#^dh_#) {
		# Probably it is debhelper command. Use DH_ECHO_ARGS
		$ENV{DH_ECHO_ARGS} = "YES";
	} else {
		print escape_shell($command, @options)."\n";
	}

	if (! $dh{NO_ACT}) {
		my $ret=system($command, @options);
		if ($ret >> 8 != 0) {
			exit $ret >> 8;
		}
		elsif ($ret) {
			exit 1;
		}
	}
}

sub loadlog {
	my $package=shift;
	my $ext=pkgext($package);
	
	my @log;
	open(LOG, "<", "debian/${ext}debhelper.log") || return;
	while (<LOG>) {
		chomp;
		push @log, $_;
		$logged{$package}{$_}=1;
	}
	close LOG;
	return @log;
}
		
sub writelog {
	my $package=shift;
	my $cmd=shift;
	my $ext=pkgext($package);
	
	open(LOG, ">>", "debian/${ext}debhelper.log") || error("failed to write to log");
	print LOG $cmd."\n";
	close LOG;
}

=head1 SEE ALSO

L<debhelper(7)>

This program is a part of debhelper.

=head1 AUTHOR

Joey Hess <joeyh@debian.org>

=cut
